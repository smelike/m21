称重类：读取稳定的重量值


波特率 19200

默认通讯格式：19200,n,8,1


指令格式：模块地址+功能代码+数据+CRC16校验


读取指令：010300500002c41a



1/打开串口，发送读取指令，等待响应返回;

2/ 记录指定发出时间，和指令返回时间;

3/ 返回响应字节的 3~7 字节，是重量数据，需转换为以 kg 为单位的十进制浮点数;

4/ 以[重量值,...]格式记录日志;



-----


import serial
import time
import json
from pathlib import Path
import struct

class WeightSensor:
    def __init__(self, config_path):
        self.config_path = config_path
        self.serial_port = None
        self.baud_rate = 19200
        self.timeout = 0.1
        self.cmd = "010300500002c41a"
        self.load_config()
        self.logger("WeightSensor initialized.")

    def load_config(self):
        try:
            with open(self.config_path, 'r', encoding='utf-8') as file:
                config = json.load(file)
                self.serial_port = config.get("serial_port")
                self.baud_rate = config.get("baud_rate", self.baud_rate)
                self.timeout = config.get("timeout", self.timeout)
                self.cmd = config.get("cmd", self.cmd)
        except FileNotFoundError:
            self.logger(f"Config file not found: {self.config_path}")
        except json.JSONDecodeError:
            self.logger(f"Error decoding config file: {self.config_path}")

    def logger(self, message):
        log_message = f"{time.strftime('%Y-%m-%d %H:%M:%S')} - {message}"
        print(log_message)
        # Append to log file
        log_dir = Path("logs")
        log_dir.mkdir(parents=True, exist_ok=True)
        with open(log_dir / "weight_sensor.log", "a", encoding='utf-8') as log_file:
            log_file.write(log_message + "\n")

    def connect(self):
        if not self.serial_port:
            self.logger("No serial port specified.")
            return False
        try:
            self.serial = serial.Serial(
                self.serial_port, 
                self.baud_rate, 
                timeout=self.timeout
            )
            self.logger(f"Connected to {self.serial_port} at {self.baud_rate} baud.")
            return True
        except serial.SerialException as e:
            self.logger(f"Failed to connect to {self.serial_port}: {e}")
            return False

    def read_weight(self):
        if not self.serial.is_open:
            self.logger("Serial port not open.")
            return None
        try:
            start_time = time.time()
            self.serial.write(bytes.fromhex(self.cmd))
            response = self.serial.read(9)  # Read expected 9 bytes response
            end_time = time.time()
            self.logger(f"Command sent at {start_time}, response received at {end_time}")
            weight = self.parse_weight(response)
            self.logger(f"Weight read: {weight}")
            return weight
        except Exception as e:
            self.logger(f"Error reading weight: {e}")
            return None

    def parse_weight(self, response):
        if len(response) != 9:
            self.logger(f"Unexpected response length: {len(response)}")
            return None
        try:
            # Extract the 3rd to 7th bytes and convert to a float representing kg
            weight_bytes = response[3:7]
            weight_int = struct.unpack('>f', weight_bytes)[0]
            weight_kg = weight_int / 1000.0  # Convert to kg
            return weight_kg
        except Exception as e:
            self.logger(f"Error parsing weight: {e}")
            return None

    def close(self):
        if self.serial and self.serial.is_open:
            self.serial.close()
            self.logger("Serial port closed.")

    def __del__(self):
        self.close()
        self.logger("WeightSensor object deleted.")

# Usage example:
config_path = "path/to/config.json"
weight_sensor = WeightSensor(config_path)
if weight_sensor.connect():
    weight = weight_sensor.read_weight()
    print(f"Measured weight: {weight}")
else:
    print("Failed to connect to the weight sensor.")
